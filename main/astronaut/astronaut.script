function init(self)
	msg.post(".", "acquire_input_focus")

	self.anim = nil

	self.input = vmath.vector3()
	self.pp = vmath.vector3()
	self.velocity = vmath.vector3()
	self.facing = vmath.vector3(0, -1, 0)
	self.correction = vmath.vector3()
end

local function animate(self)
	local f = "front"
	if self.facing.y > 0 then
		f = "back"
	elseif self.facing.x > 0 then
		f = "right"
	elseif self.facing.x < 0 then
		f = "left"
	end

	local a = hash(f .. "-idle")
	local moving = vmath.length_sqr(self.velocity) > 0.01
	if moving then
		a = hash(f .. "-walk")

		-- dust particles
		if math.random() < 0.1 then
			particlefx.play("#dust")
		end
	end

	if a ~= self.anim then
		self.anim = a
		msg.post("#sprite", "play_animation", { id = self.anim })
	end
end

function update(self, dt)
	if vmath.length_sqr(self.input) > 1 then
		self.input = vmath.normalize(self.input)
	end

	if vmath.length_sqr(self.input) > 0 then
		self.facing = self.input
	end

	animate(self)

	local p = go.get_position()
	local newp = p + self.input * 150 * dt
	go.set_position(newp)

	self.velocity = p - self.pp		
	self.pp = p
	self.input = vmath.vector3()
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and message.other_group == hash("obstacles") then
		-- simple collision solver
		local proj = vmath.dot(self.correction, message.normal)
		local comp = (message.distance - proj) * message.normal
		self.correction = self.correction + comp
		go.set_position(go.get_position() + comp)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("north") then
		self.input.y = 1
	elseif action_id == hash("south") then
		self.input.y = -1
	elseif action_id == hash("east") then
		self.input.x = 1
	elseif action_id == hash("west") then
		self.input.x = -1
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
	particlefx.play("#dust")
end